---
title: "Lowcode"
date: 2023-10-06T15:11:03+08:00
draft: false
---
* LowCode
低代码这几年一直有一些热度，也经常有一些亮眼的东西产出，有些还是蛮有意思的，目前看了很多方案，
大致有这么几种：

** 云服务
国内也有好几家做低代码云服务的，这个我就没有重点关注了，毕竟我不是目标人群～

云服务的好处是，你完全不需要开发人员，随便找个美工直接托拉就整个网站/小程序了！

这不香吗？当然很香了，特别是针对那些没有任何研发能力的公司来说，是太香了。

当然缺点也非常明显： 持续收费，刚开始成本小，后续成本会逐渐变大：

  1. 第一年：这么便宜，划算！
  2. 第二年：业务扩大了，要加钱！
  3. 第三年：加钱！
  4. 第四年：想加个特别的功能，不好意思，云服务现在不支持，想要支持？加钱加钱！
  5. 第四年：云服务公司倒了/业务停了，没法用了……

** 开源+私有化部署
针对上面云服务的问题，最直接的方案就是，开源+私有化部署,就算公司倒了，这不是还有开源代码吗？
而且开源还有一定的扩展性，可以自己添加定制功能。

例如： Appsmith/pageplug,budibase,tooljet等

这种看起来也挺香的，但是这几个我看了一遍，制作基本的网站没问题，但是如果需要权限管理之类的，就只能升级企业版了，加钱加钱！
** 自定义schema
想要拥有更大的扩展空间，更多的自主性，就只能从无代码->少代码方向不断的靠拢了。

常见的是用用json实现schema，通过schema实现定制化不是特别高的界面+一些简单的逻辑条件。

这个我最早接触到的是eleme的[[https://github.com/eleme/duang][duang]],内部运营功能开发起来是真的快，而且基本不需要特别多的前端技能，不过这个很早已经不再维护了。

目前常见的如 yaoapp,百度的amis,阿里的lowcode-engine(这个兼有生成代码的能力)，sunmao-ui等，都是这种用json描述schema。

这种类别的框架/项目，优点是写起来简单，开发快速，特别适合有后端开发经验的人群，能比较迅速的实现出一些内部系统。
也有一定的扩展性上，大部分这些框架都支持自定义组件。

缺点也很明显： 需要依赖框架本身，哪天框架被废弃了就GG了。

** 直接产出前端代码
针对上面的缺点,阿里的lowcode-engine/网易的tango又给出了另一个解决方法，直接产出代码。

这样代码都给你了，想自定义就自定义，多好。

当然这个方案也不是没有缺点，像lowcode-engine自动生成的代码，是不太适合人工阅读的，而且这个本身也只是一个"engine"，想要玩的好，还需要自己开发不少东西。

网易的tango宣称直接解析js代码，看起来有点意思，不过目前还不是太成熟，虽然生成的代码仍然要依赖tangoboot框架，但是看起来还是非常值得期待的。

# 总结
从上面可以看出，无代码->少代码->生成代码，是一个递进关系，没有一个方案是完美的，无论哪一个方案都会有成本：云服务成本也好、开发成本也好，想要创造一个东西，总归是需要付出的，只不过是要根据个人/公司的情况，选择成本最小的方案。

另外，前端玩了这么多花样，其实这些东西 delphi 20年前就有了，不就是拖拽控件+事件响应吗……C#的winform,C++的QtCreator都是这个套路……

其实我是不大明白，为什么前端领域搞了这么多年，才想起来去玩delphi 20年前就玩的东西……
